{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Utility.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","components/Charts/BarChart.js","components/Charts/LineChart.js","components/Charts/PieChart.js","components/Charts/Charts.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","intitialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","data","console","log","id","delete","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","useEffect","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","htmlFor","onChange","target","placeholder","required","parseFloat","BarChart","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","width","height","options","title","display","fontSize","legend","responsive","LineChart","maintainAspectRatio","responsiveAnimationDuration","scales","yAxes","ticks","callback","index","values","numeral","format","tooltips","callbacks","tooltipItem","datasetIndex","yLabel","PieChart","Charts","App","style","position","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cc261d1a.chunk.js","sourcesContent":["//rafc\r\nimport React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <h1>\r\n      Expense Tracker\r\n    </h1>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'GET_TRANSACTIONS':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        transactions: action.payload\r\n      }\r\n    case 'DELETE_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\r\n      }\r\n    case 'ADD_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactions: [...state.transactions, action.payload]\r\n      }\r\n    case 'TRANSACTION_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport AppReducer from './AppReducer'\r\nimport axios from 'axios'\r\n//SECTION Dummy State\r\nconst intitialState = {\r\n  transactions: [],\r\n  error: null,\r\n  loading: true\r\n}\r\n\r\n//SECTION Context\r\nexport const GlobalContext = createContext(intitialState)\r\n\r\n//SECTION Provider\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, intitialState)\r\n\r\n\r\n  //SECTION API CAllS\r\n  async function getTransactions() {\r\n    try {\r\n      const res = await axios.get('/api/v1/transactions');\r\n      // console.log(res);\r\n\r\n      // @ts-ignore\r\n      dispatch({\r\n        type: 'GET_TRANSACTIONS',\r\n        payload: res.data.data,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      // @ts-ignore\r\n      dispatch({\r\n        type: 'TRANSACTIONS_ERROR',\r\n        // payload: error.response.data.error,\r\n      });\r\n    }\r\n  }\r\n\r\n  //SECTION Actions (dispatch to the Reducer)\r\n  async function deleteTransaction(id) {\r\n\r\n    try {\r\n      await axios.delete(`/api/v1/transactions/${id}`)\r\n      // @ts-ignore\r\n      dispatch({\r\n        type: 'DELETE_TRANSACTION',\r\n        payload: id\r\n      });\r\n    } catch (error) {\r\n      // @ts-ignore\r\n      dispatch({\r\n        type: 'TRANSACTIONS_ERROR',\r\n        // payload: error.response.data.error,\r\n      });\r\n    }\r\n  }\r\n\r\n  async function addTransaction(transaction) {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n\r\n    try {\r\n      const res = await axios.post('/api/v1/transactions', transaction, config);\r\n\r\n      // @ts-ignore\r\n      dispatch({\r\n        type: 'ADD_TRANSACTION',\r\n        payload: res.data.data\r\n      });\r\n    } catch (err) {\r\n      // @ts-ignore\r\n      dispatch({\r\n        type: 'TRANSACTION_ERROR',\r\n        // payload: err.response.data.error\r\n      });\r\n    }\r\n  }\r\n\r\n  //SECTION Passing Children\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        loading: state.loading,\r\n        error: state.error,\r\n        getTransactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>)\r\n}\r\n\r\n\r\n// import React, { createContext, useReducer } from 'react';\r\n// import AppReducer from './AppReducer';\r\n// import axios from 'axios';\r\n\r\n// // Initial state\r\n// const initialState = {\r\n//   transactions: [],\r\n//   error: null,\r\n//   loading: true\r\n// }\r\n\r\n// // Create context\r\n// export const GlobalContext = createContext(initialState);\r\n\r\n// // Provider component\r\n// export const GlobalProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n//   // Actions\r\n//   async function getTransactions() {\r\n//     try {\r\n//       const res = await axios.get('//localhost:5000/api/v1/transactions');\r\n\r\n//       // @ts-ignore\r\n//       dispatch({\r\n//         type: 'GET_TRANSACTIONS',\r\n//         payload: res.data.data\r\n//       });\r\n//     } catch (err) {\r\n//       // @ts-ignore\r\n//       dispatch({\r\n//         type: 'TRANSACTION_ERROR',\r\n//         // payload: err.response.data.error\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   async function deleteTransaction(id) {\r\n//     try {\r\n//       await axios.delete(`//localhost:5000/api/v1/transactions/${id}`);\r\n\r\n//       // @ts-ignore\r\n//       dispatch({\r\n//         type: 'DELETE_TRANSACTION',\r\n//         payload: id\r\n//       });\r\n//     } catch (err) {\r\n//       // @ts-ignore\r\n//       dispatch({\r\n//         type: 'TRANSACTION_ERROR',\r\n//         // payload: err.response.data.error\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   async function addTransaction(transaction) {\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     }\r\n\r\n//     try {\r\n//       const res = await axios.post('//localhost:5000/api/v1/transactions', transaction, config);\r\n\r\n//       // @ts-ignore\r\n//       dispatch({\r\n//         type: 'ADD_TRANSACTION',\r\n//         payload: res.data.data\r\n//       });\r\n//     } catch (err) {\r\n//       // @ts-ignore\r\n//       dispatch({\r\n//         type: 'TRANSACTION_ERROR',\r\n//         // payload: err.response.data.error\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   return (<GlobalContext.Provider value={{\r\n//     transactions: state.transactions,\r\n//     error: state.error,\r\n//     loading: state.loading,\r\n//     getTransactions,\r\n//     deleteTransaction,\r\n//     addTransaction\r\n//   }}>\r\n//     {children}\r\n//   </GlobalContext.Provider>);\r\n// }","export function numberWithCommas(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { numberWithCommas } from './Utility'\r\n\r\nconst Balance = () => {\r\n\r\n  const { transactions } = useContext(GlobalContext)\r\n\r\n  const amounts = transactions.map(transaction => transaction.amount)\r\n\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2)\r\n\r\n\r\n  return (\r\n    <>\r\n      <h4>Your Balance</h4>\r\n      <h1>${numberWithCommas(total)}</h1>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { numberWithCommas } from './Utility';\r\n\r\n\r\nconst IncomeExpenses = () => {\r\n  const { transactions } = useContext(GlobalContext)\r\n\r\n  const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n  const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = (\r\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2);\r\n\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Income</h4>\r\n        <p className=\"money-plus\">${numberWithCommas(income)}</p>\r\n      </div>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money-minus\">${numberWithCommas(expense)}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IncomeExpenses\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { numberWithCommas } from './Utility'\r\n\r\nexport const Transaction = ({ transaction }) => {\r\n  const sign = transaction.amount < 0 ? '-' : '+'\r\n  const { deleteTransaction } = useContext(GlobalContext)\r\n  return (\r\n    <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\r\n      {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))}</span><button className=\"delete-btn\" onClick={() => deleteTransaction(transaction._id)}>X</button>\r\n    </li>\r\n  )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { Transaction } from './Transaction'\r\n\r\nconst TransactionList = () => {\r\n  const { transactions, getTransactions } = useContext(GlobalContext)\r\n\r\n  useEffect(() => {\r\n    getTransactions()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  return (\r\n    <>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map(transaction => ((\r\n          <Transaction transaction={transaction} key={transaction._id} />\r\n        )))}\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionList\r\n","import React, { useState, useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n\r\nconst AddTransaction = () => {\r\n  const [text, setText] = useState('')\r\n  const [amount, setAmount] = useState(0)\r\n\r\n  const { addTransaction } = useContext(GlobalContext)\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n    const newTransaction = {\r\n      text,\r\n      //NOTE +amount turns string amount into number ammount\r\n      amount: +amount,\r\n    }\r\n\r\n    addTransaction(newTransaction)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <h3>Add New Transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"Purchase\">\r\n          <label htmlFor=\"text\">Purchase Name:</label>\r\n          <input\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Enter Purchase here...\"\r\n            required />\r\n        </div>\r\n        <div className=\"Amount\">\r\n          <label htmlFor=\"amount\">\r\n            Amount: <br />\r\n            <small className=\"pl-3\"> * - negative expense, + positive income*</small>\r\n          </label>\r\n          <input\r\n            value={amount}\r\n            onChange={(e) => setAmount(parseFloat(e.target.value))}\r\n            type=\"number\"\r\n            placeholder=\"Enter +Amount or -Amount...\"\r\n            required />\r\n        </div>\r\n        <button className=\"btn\">Add Transaction</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddTransaction\r\n","import React from 'react'\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\n\r\nexport const BarChart = ({ text, amount }) => {\r\n\r\n  // let amount = transaction.map(amount => transaction.amount)\r\n  console.log(text, amount);\r\n\r\n  const data = {\r\n    labels: [...text],\r\n    datasets: [\r\n      {\r\n        label: 'Transactions ',\r\n        backgroundColor: 'rgb(192,57,43)',\r\n        borderColor: 'rgba(153,0,0,0.6)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: [...amount]\r\n      }\r\n    ]\r\n  };\r\n  // let data = api.get(\"line-data\");\r\n  return (\r\n    <div>\r\n      <Bar\r\n        data={data}\r\n        width={100}\r\n        height={50}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: 'Spending Chart',\r\n            fontSize: 25\r\n          },\r\n          legend: {\r\n            display: true,\r\n          },\r\n          // maintainAspectRatio: false,\r\n          responsive: true,\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\n// import \"chartjs-plugin-lineheight-annotation\";\r\nimport numeral from 'numeral'\r\n\r\n\r\n\r\nexport const LineChart = ({ text, amount }) => {\r\n\r\n  // let amount = transaction.map(amount => transaction.amount)\r\n  console.log(text, amount);\r\n\r\n  //FIXME Construction (Figuring out how to change graph color based on amount value)\r\n  const changeColor = () => {\r\n    let tableData = amount\r\n    for (let i = 0; i < tableData.length; i++) {\r\n      var color = \"rgb(0, 255, 0)\";\r\n      //You can check for tableData[i].value and put your conditions here\r\n      if (tableData[i].value <= -1) {\r\n        color = \"rgba(255,99,132,0.2)\"; // Red\r\n      }\r\n      else {\r\n        color = \"rgb(0, 255, 0)\"// Green\r\n      }\r\n      tableData[i].fillColor = color;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const data = {\r\n    labels: text,\r\n    datasets: [\r\n      {\r\n        label: 'Transactions',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        // backgroundColor: changeColor(),//FIXME\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: amount\r\n      }\r\n    ]\r\n  }\r\n\r\n\r\n  return (\r\n    <div id=\"line\">\r\n      <Line\r\n        data={data}\r\n        width={1000}\r\n        height={500}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: 'Spending Chart',\r\n            fontSize: 25\r\n          },\r\n          responsive: true,\r\n          legend: { display: true },\r\n          maintainAspectRatio: false,\r\n          responsiveAnimationDuration: 0,\r\n          scales: {\r\n            yAxes: [{\r\n              ticks: {\r\n                callback: function (value, index, values) {\r\n                  // add comma as thousand separator\r\n                  return '$ ' + numeral(value).format('0,0')\r\n                },\r\n              }\r\n            }]\r\n          },\r\n          tooltips: {\r\n            callbacks: {\r\n              label: function (tooltipItem, data) {\r\n                var label = data.datasets[tooltipItem.datasetIndex].label || ''\r\n\r\n                if (label) {\r\n                  label += ': '\r\n                }\r\n                label += numeral(tooltipItem.yLabel).format('0,0')\r\n                return label\r\n              },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\n\r\nexport const PieChart = ({ text, amount }) => {\r\n\r\n  // let amount = transaction.map(amount => transaction.amount)\r\n  console.log(text, amount);\r\n\r\n  const data = {\r\n    labels: [...text],\r\n    datasets: [\r\n      {\r\n        label: 'Transactions',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: [...amount]\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Pie\r\n        data={data}\r\n        width={100}\r\n        height={50}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: 'Spending Chart',\r\n            fontSize: 25\r\n          },\r\n          legend: {\r\n            display: true,\r\n            // text: 'Dollar Value'\r\n          },\r\n          // maintainAspectRatio: false,\r\n          responsive: true\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { GlobalContext } from '../../context/GlobalState';\r\nimport { BarChart } from './BarChart';\r\nimport { LineChart } from './LineChart';\r\nimport { PieChart } from './PieChart';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\n\r\nconst Charts = () => {\r\n  const { transactions, getTransactions } = useContext(GlobalContext)\r\n\r\n  let amounts = transactions.map(transaction => transaction.amount)\r\n  let text = transactions.map(transaction => transaction.text)\r\n  console.log(transactions, text, amounts);\r\n\r\n  useEffect(() => {\r\n    getTransactions()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"m-5\">\r\n      <h3 className=\"mx-auto\">Transaction Charts</h3>\r\n      {/*FIXME  Construction */}\r\n      <Tabs>\r\n        <TabList>\r\n          <Tab>Line Chart</Tab>\r\n          <Tab>Bar Chart</Tab>\r\n          <Tab>Pie Chart</Tab>\r\n        </TabList>\r\n        <TabPanel>\r\n          <LineChart text={text} amount={amounts} />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <BarChart text={text} amount={amounts} />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <PieChart text={text} amount={amounts} />\r\n        </TabPanel>\r\n      </Tabs>\r\n      {/* END OF CON */}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Balance from './components/Balance';\nimport IncomeExpenses from './components/IncomeExpenses';\nimport TransactionList from './components/TransactionList';\nimport AddTransaction from './components/AddTransaction';\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport Chart from './components/Charts/Charts';\n\n\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      {/* <div style={{ position: \"relative\", width: 800, height: 800 }}>\n      </div> */}\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div id=\"transactions\">\n            <Header />\n            <Balance />\n            <IncomeExpenses />\n            <TransactionList />\n            <AddTransaction />\n          </div>\n          <div id=\"charts\" style={{ position: \"relative\", width: 800, height: 800 }}>\n            <Chart />\n          </div>\n        </div>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}